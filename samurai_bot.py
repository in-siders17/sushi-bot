import asyncio
import logging
import os
import io
import re
import sys

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.filters.state import StateFilter
from aiogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, FSInputFile, InputMediaPhoto)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties

from barcode import Code128
from barcode.writer import ImageWriter

logging.basicConfig(level=logging.INFO)

API_TOKEN = '7738742994:AAF2IcZJRjBzd1KnfpDpxeF1tyf-bNq7jkA'
OWNER_ID = 958096246, 688755430
ADMINS = {958096246, 688755430}

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

class AddAktsiya(StatesGroup):
    waiting_for_title = State()
    waiting_for_desc = State()

class AddVacancy(StatesGroup):
    waiting_for_position = State()
    waiting_for_location = State()

class Registration(StatesGroup):
    waiting_for_phone = State()
    waiting_for_name = State()

class Order(StatesGroup):
    choosing_branch = State()

aktsii = []
vacancies = []
user_feedback_waiting = set()
registered_users = {}
show_aktsii = True  # [cfg]
show_vacancies = True  # [cfg]

#-----------------------------------------------------------

def update_config_flag(key: str, value: bool):
    file_path = sys.argv[0]  # —Ç–µ–∫—É—â–∏–π —Å–∫—Ä–∏–ø—Ç
    with open(file_path, "r", encoding="utf-8") as f:
        content = f.read()

    pattern = rf"{key}\s*=\s*(True|False)\s*# \[cfg\]"
    new_line = f"{key} = {value}  # [cfg]"
    new_content = re.sub(pattern, new_line, content)

    with open(file_path, "w", encoding="utf-8") as f:
        f.write(new_content)

#-----------------------------------------------------------

def get_user_keyboard():
    global show_aktsii, show_vacancies
    row1 = [KeyboardButton(text="üìñ –ú–µ–Ω—é")]
   # if show_aktsii:
    #    row1.append(KeyboardButton(text="üî• –ê–∫—Ü—ñ—ó —Ç–∞ –∑–Ω–∏–∂–∫–∏"))
    #if show_vacancies:
     #   row1.append(KeyboardButton(text="üìÑ –í–∞–∫–∞–Ω—Å—ñ—ó"))
    keyboard = [
        row1,
        [KeyboardButton(text="üòé –ú–∏ –û–Ω–ª–∞–π–Ω"), KeyboardButton(text="üìç –ó–Ω–∞–π—Ç–∏ –Ω–∞—Å")],
        [KeyboardButton(text="üíå –í—ñ–¥–≥—É–∫ —ñ –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è"), KeyboardButton(text="üìû –ó–∞–º–æ–≤–∏—Ç–∏")]
    ]

    return ReplyKeyboardMarkup(resize_keyboard=True, keyboard=keyboard)

def get_admin_keyboard():
    base_kb = get_user_keyboard()  # –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë—Ç
    return ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[*base_kb.keyboard, [KeyboardButton(text="üîß –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å")]]
    )

#-----------------------------------------------------------

@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in registered_users:
        kb = get_admin_keyboard() if user_id in ADMINS else get_user_keyboard()
        await message.answer(
            f"üëã –ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, {registered_users[user_id]['name']}!",
            reply_markup=kb
        )
        return

    kb = ReplyKeyboardMarkup(
        resize_keyboard=True,
        one_time_keyboard=True,
        keyboard=[
            [KeyboardButton(text="üì± –ù–∞–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)]
        ]
    )
    await message.answer("–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=kb)
    await state.set_state(Registration.waiting_for_phone)

@dp.message(Registration.waiting_for_phone, F.contact)
async def handle_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)
    await message.answer("–î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")
    await state.set_state(Registration.waiting_for_name)

@dp.message(Registration.waiting_for_name)
async def handle_name(message: Message, state: FSMContext):
    data = await state.get_data()
    name = message.text.strip()
    telegram_id = message.from_user.id

    registered_users[telegram_id] = {
        "name": name,
        "phone": data["phone"]
    }

    await bot.send_message(
        OWNER_ID,
        f"üö® <b>–ù–û–í–ò–ô –ö–õ–Ü–Ñ–ù–¢</b> üö®\n"
        f"üë§ –Ü–º‚Äô—è: <b>{name}</b>\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: +<b>{data['phone']}</b>\n"
        f"üÜî Telegram ID: <code>{telegram_id}</code>\n"
        f"üí¨ @{message.from_user.username or '–Ω–µ–º–∞—î username'}\n\n"
    )

    kb = get_admin_keyboard() if telegram_id in ADMINS else get_user_keyboard()
    await message.answer("‚úÖ –í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!", reply_markup=kb)
    await state.clear()

#-----------------------------------------------------------

@dp.message(F.text == "üîß –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel_handler(message: Message):
    if message.from_user.id not in ADMINS:
        return
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∞–∫—Ü—ñ—é"), KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—é")],
        [KeyboardButton(text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫—Ü—ñ—é"), KeyboardButton(text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—é")],
        [KeyboardButton(text="üü¢ –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –∞–∫—Ü—ñ—ó"), KeyboardButton(text="üü¢ –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—ó")],
        [KeyboardButton(text="üî¥ –°—Ö–æ–≤–∞—Ç–∏ –∞–∫—Ü—ñ—ó"), KeyboardButton(text="üî¥ –°—Ö–æ–≤–∞—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—ó")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é")]
    ])
    await message.answer("üîß –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞. –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=kb)

@dp.message(F.text == "‚ûï –î–æ–¥–∞—Ç–∏ –∞–∫—Ü—ñ—é")
async def add_aktsiya_start(message: Message, state: FSMContext):
    if message.from_user.id != OWNER_ID:
        return
    await state.set_state(AddAktsiya.waiting_for_title)
    await message.answer("üõí –ù–∞–ø–∏—à—ñ—Ç—å, –Ω–∞ —è–∫–∏–π —Ç–æ–≤–∞—Ä —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∞–∫—Ü—ñ—é:")

@dp.message(AddAktsiya.waiting_for_title)
async def add_aktsiya_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(AddAktsiya.waiting_for_desc)
    await message.answer("üïí –ù–∞–ø–∏—à—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó –∞–∫—Ü—ñ—ó:")

@dp.message(AddAktsiya.waiting_for_desc)
async def add_aktsiya_desc(message: Message, state: FSMContext):
    data = await state.get_data()
    aktsii.append({"title": data["title"], "desc": message.text})
    await message.answer("‚úÖ –ê–∫—Ü—ñ—é –¥–æ–¥–∞–Ω–æ!", reply_markup=get_admin_keyboard())
    await state.clear()

@dp.message(F.text == "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫—Ü—ñ—é")
async def delete_aktsiya_list(message: Message):
    if message.from_user.id != OWNER_ID or not aktsii:
        await message.answer("‚ùå –ê–∫—Ü—ñ–π –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ–º–∞—î.")
        return
    msg = "\n".join([f"{i+1}. {a['title']} ({a['desc']})" for i, a in enumerate(aktsii)])
    await message.answer("üóëÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–∫—Ü—ñ—ó –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:\n\n" + msg)

@dp.message(F.text == "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—é")
async def delete_vacancy_list(message: Message):
    if message.from_user.id != OWNER_ID or not vacancies:
        await message.answer("‚ùå –í–∞–∫–∞–Ω—Å—ñ–π –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ–º–∞—î.")
        return
    msg = "\n".join([f"{i+1}. {v['title']} ({v['place']})" for i, v in enumerate(vacancies)])
    await message.answer("üóëÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞–∫–∞–Ω—Å—ñ—ó –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:\n\n" + msg)

@dp.message(lambda msg: msg.text.isdigit())
async def handle_delete_index(message: Message):
    if message.from_user.id != OWNER_ID:
        return
    index = int(message.text) - 1
    if 0 <= index < len(aktsii):
        removed = aktsii.pop(index)
        await message.answer(f"‚úÖ –ê–∫—Ü—ñ—é '{removed['title']}' –≤–∏–¥–∞–ª–µ–Ω–æ.")
    elif 0 <= index < len(vacancies):
        removed = vacancies.pop(index)
        await message.answer(f"‚úÖ –í–∞–∫–∞–Ω—Å—ñ—é '{removed['title']}' –≤–∏–¥–∞–ª–µ–Ω–æ.")
    else:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä.")

@dp.message(F.text == "‚ûï –î–æ–¥–∞—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—é")
async def add_vacancy_start(message: Message, state: FSMContext):
    if message.from_user.id != OWNER_ID:
        return
    await state.set_state(AddVacancy.waiting_for_position)
    await message.answer("üë§ –ù–∞ —è–∫—É –ø–æ—Å–∞–¥—É —Ö–æ—á–µ—Ç–µ –≤–∑—è—Ç–∏ –ª—é–¥–∏–Ω—É? –û–ø–∏—à—ñ—Ç—å —Ç–∞–∫–æ–∂ –≤–∏–º–æ–≥–∏:")

@dp.message(AddVacancy.waiting_for_position)
async def add_vacancy_position(message: Message, state: FSMContext):
    await state.update_data(position=message.text)
    await state.set_state(AddVacancy.waiting_for_location)
    await message.answer("üìç –í–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É (–ª–æ–∫–∞—Ü—ñ—é) –¥–ª—è —Ü—ñ—î—ó –≤–∞–∫–∞–Ω—Å—ñ—ó:")

@dp.message(AddVacancy.waiting_for_location)
async def add_vacancy_location(message: Message, state: FSMContext):
    data = await state.get_data()
    vacancies.append({"title": data["position"], "place": message.text})
    await message.answer("‚úÖ –í–∞–∫–∞–Ω—Å—ñ—é –¥–æ–¥–∞–Ω–æ!", reply_markup=get_admin_keyboard())
    await state.clear()

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é")
async def back_to_menu(message: Message):
    kb = get_admin_keyboard() if message.from_user.id in ADMINS else get_user_keyboard()
    await message.answer("‚¨áÔ∏è –ú–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π:", reply_markup=kb)

#-----------------------------------------------------------

@dp.message(F.text == "üìñ –ú–µ–Ω—é")
async def show_menu_categories(message: Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üç£ –†–æ–ª–ª–∏", callback_data="menu_rolls")],
            [InlineKeyboardButton(text="üç§ –ì–∞—Ä—è—á—ñ —Ä–æ–ª–ª–∏", callback_data="menu_hot")],
            [InlineKeyboardButton(text="üç± –°–µ—Ç–∏", callback_data="menu_sets")],
            [InlineKeyboardButton(text="üçú –ö—É—Ö–Ω—è", callback_data="menu_kitchen")],
            [InlineKeyboardButton(text="üç∏ –ù–∞–ø–æ—ó", callback_data="menu_other")]
        ]
    )
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –º–µ–Ω—é:", reply_markup=kb)

user_last_messages = {}

async def delete_previous_messages(user_id: int, chat_id: int):
    if user_id in user_last_messages:
        for message_id in user_last_messages[user_id]:
            try:
                await bot.delete_message(chat_id=chat_id, message_id=message_id)
            except Exception:
                pass
        user_last_messages[user_id] = []

@dp.message(F.text == "üìñ –ú–µ–Ω—é")
async def show_menu_categories(message: types.Message):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üç£ –†–æ–ª–ª–∏", callback_data="menu_rolls")],
        [types.InlineKeyboardButton(text="üç§ –ì–∞—Ä—è—á—ñ —Ä–æ–ª–ª–∏", callback_data="menu_hot")],
        [types.InlineKeyboardButton(text="üç± –°–µ—Ç–∏", callback_data="menu_sets")],
        [types.InlineKeyboardButton(text="üçú –ö—É—Ö–Ω—è", callback_data="menu_kitchen")],
        [types.InlineKeyboardButton(text="üç∏ –ù–∞–ø–æ—ó", callback_data="menu_other")]
    ])
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –º–µ–Ω—é:", reply_markup=kb)

@dp.callback_query(F.data == "menu_rolls")
async def menu_rolls_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id

    await delete_previous_messages(user_id, chat_id)

    text_msg = await callback.message.answer("üç£ –†–æ–ª–ª–∏ –º–µ–Ω—é:")
    photos = [
        InputMediaPhoto(media=FSInputFile("menu_images/menu_rolls1.jpg")),
        InputMediaPhoto(media=FSInputFile("menu_images/menu_rolls2.jpg")),
        InputMediaPhoto(media=FSInputFile("menu_images/menu_rolls3.jpg")),
        InputMediaPhoto(media=FSInputFile("menu_images/menu_rolls4.jpg")),
        InputMediaPhoto(media=FSInputFile("menu_images/menu_rolls5.jpg")),
        InputMediaPhoto(media=FSInputFile("menu_images/menu_rolls6.jpg")),
        InputMediaPhoto(media=FSInputFile("menu_images/menu_rolls7.jpg"))
    ]
    media_msgs = await callback.message.answer_media_group(media=photos)
    user_last_messages[user_id] = [text_msg.message_id] + [m.message_id for m in media_msgs]

    await callback.answer()

@dp.callback_query(F.data == "menu_hot")
async def menu_hot_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id

    await delete_previous_messages(user_id, chat_id)

    text_msg = await callback.message.answer("üç§ –ì–∞—Ä—è—á—ñ —Ä–æ–ª–ª–∏:")
    photos = [
        InputMediaPhoto(media=FSInputFile("menu_images/menu_hot1.jpg")),
        InputMediaPhoto(media=FSInputFile("menu_images/menu_hot2.jpg"))
    ]
    media_msgs = await callback.message.answer_media_group(media=photos)
    user_last_messages[user_id] = [text_msg.message_id] + [m.message_id for m in media_msgs]

    await callback.answer()

@dp.callback_query(F.data == "menu_sets")
async def menu_sets_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id

    await delete_previous_messages(user_id, chat_id)

    text_msg = await callback.message.answer("üç± –°–µ—Ç–∏:")
    photos = [
        InputMediaPhoto(media=FSInputFile("menu_images/menu_sets1.jpg")),
        InputMediaPhoto(media=FSInputFile("menu_images/menu_sets2.jpg"))
    ]
    media_msgs = await callback.message.answer_media_group(media=photos)
    user_last_messages[user_id] = [text_msg.message_id] + [m.message_id for m in media_msgs]

    await callback.answer()

@dp.callback_query(F.data == "menu_kitchen")
async def menu_kitchen_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id

    await delete_previous_messages(user_id, chat_id)

    text_msg = await callback.message.answer("üçú –ö—É—Ö–Ω—è:")
    photos = [
        InputMediaPhoto(media=FSInputFile("menu_images/menu_kitchen1.jpg")),
        InputMediaPhoto(media=FSInputFile("menu_images/menu_kitchen2.jpg")),
        InputMediaPhoto(media=FSInputFile("menu_images/menu_kitchen3.jpg"))
    ]
    media_msgs = await callback.message.answer_media_group(media=photos)
    user_last_messages[user_id] = [text_msg.message_id] + [m.message_id for m in media_msgs]

    await callback.answer()

@dp.callback_query(F.data == "menu_other")
async def menu_other_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id

    await delete_previous_messages(user_id, chat_id)

    text_msg = await callback.message.answer("üç∏ –ù–∞–ø–æ—ó:")
    photos = [
        InputMediaPhoto(media=FSInputFile("menu_images/menu_other.jpg"))
    ]
    media_msgs = await callback.message.answer_media_group(media=photos)
    user_last_messages[user_id] = [text_msg.message_id] + [m.message_id for m in media_msgs]

    await callback.answer()

@dp.callback_query(F.data.startswith("menu_"))
async def handle_menu_category(callback: types.CallbackQuery):
    category = callback.data.replace("menu_", "")
    try:
        await callback.message.answer_photo(
            photo=FSInputFile(f"menu_images/{category}.jpg"),
            caption=f"<b>{category.title()}</b>\n–°–º–∞—á–Ω—ñ —Å—Ç—Ä–∞–≤–∏ –¥–ª—è –≤–∞—Å ü•¢",
            parse_mode=ParseMode.HTML
        )
    except Exception:
        await callback.message.answer(
            f"üì¶ –†–æ–∑–¥—ñ–ª <b>{category.title()}</b> –Ω–∞—Ä–∞–∑—ñ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è...",
            parse_mode=ParseMode.HTML
        )
    await callback.answer()

@dp.message(F.text == "üßæ –í–∞—à–∞ –∫–∞—Ä—Ç–∫–∞")
async def card_handler(message: Message):
    try:
        telegram_id = message.from_user.id
        user = registered_users.get(telegram_id)

        if not user:
            await message.answer("‚ùå –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.")
            return

        user_id = str(telegram_id)
        name = user.get("name", "‚Äî")
        phone = user.get("phone", "‚Äî")
        bonus = 0.00  # –∑–∞–≥–ª—É—à–∫–∞, –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫–æ–π SkyService

        writer_options = {
            'module_width': 0.2,
            'module_height': 10.0,
            'font_size': 8,
            'quiet_zone': 1.0
        }

        barcode_image = io.BytesIO()
        Code128(user_id, writer=ImageWriter()).write(barcode_image, options=writer_options)
        barcode_image.seek(0)

        filename = f"barcode_{user_id}.png"
        with open(filename, "wb") as f:
            f.write(barcode_image.read())

        photo_file = FSInputFile(filename)
        caption = (
            f"<b>üìá –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–∞—Ä—Ç–∫—É –ø–æ–∫—É–ø—Ü—è:</b>\n"
            f"üë§ <b>–Ü–º‚Äô—è:</b> {name}\n"
            f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
            f"üÜî <b>ID:</b> {user_id}\n"
            f"üí∞ <b>–ë–æ–Ω—É—Å–∏:</b> {bonus:.2f} –≥—Ä–Ω\n\n"
            "<b>üì¶ –û—Å—Ç–∞–Ω–Ω—î –ø—Ä–∏–¥–±–∞–Ω–Ω—è:</b>\n"
            "üóìÔ∏è <b>–î–∞—Ç–∞:</b> ‚Äì\n"
            "üí≥ <b>–°—É–º–∞:</b> 0.00 –≥—Ä–Ω\n"
            "üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> ‚Äì"
        )
        await message.answer_photo(photo=photo_file, caption=caption)
        os.remove(filename)
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–∞—Ä—Ç–∫–∏: {e}")

@dp.message(F.text == "üî• –ê–∫—Ü—ñ—ó —Ç–∞ –∑–Ω–∏–∂–∫–∏")
async def discounts_handler(message: Message):
    if aktsii:
        text = "\n\n".join([
            f"üõçÔ∏è –ê–∫—Ü—ñ—ó: <b>{item['title']}</b>\nüí∏ –î—ñ–π—Å–Ω–æ: {item['desc']}"
            for item in aktsii
        ])
    else:
        text = "–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∞–∫—Ü—ñ–π."
    await message.answer(text, parse_mode=ParseMode.HTML)

@dp.message(F.text == "üìÑ –í–∞–∫–∞–Ω—Å—ñ—ó")
async def vacancies_handler(message: Message):
    if not show_vacancies:
        return
    if not vacancies:
        await message.answer("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –≤–∞–∫–∞–Ω—Å—ñ–π.")
    else:
        text = "\n\n".join([
            f"üè¢ <b>{v['place']}</b>\nüìå –ü–æ–∑–∏—Ü—ñ—è: {v['title']}"
            for v in vacancies
        ])
        await message.answer(text, parse_mode=ParseMode.HTML)

@dp.message(F.text == "üòé –ú–∏ –û–Ω–ª–∞–π–Ω")
async def online_handler(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Telegram", url="https://t.me/+EiNhYfYSNL42Y2Ri")],
        [InlineKeyboardButton(text="Instagram", url="https://instagram.com/sushi._samurai777?igshid=YmMyMTA2M2Y=")],
        [InlineKeyboardButton(text="Viber", url="https://invite.viber.com/?g2=AQB0MS57NNfrFk84TNP2gqbdnK%2FWhDHdWwN7Vf4stXdEEoE9NG%2BTiAius6YYIDBb")]
    ])
    await message.answer("–ú–∏ –æ–Ω–ª–∞–π–Ω —Ç—É—Ç:", reply_markup=kb)

@dp.message(F.text == "üìç –ó–Ω–∞–π—Ç–∏ –Ω–∞—Å")
async def choose_location(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
                text="üìç –í–æ–∫–∑–∞–ª—å–Ω–∞ 26–ë",
                url="https://maps.app.goo.gl/4UEaeHhixM3bqFhcA")],
        [InlineKeyboardButton(
                text="üìç –ö–∏—ó–≤—Å—å–∫–∞ 102",
                url="https://maps.app.goo.gl/GFwkJ58peZTDzRgV8")]
    ])
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å Samurai, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –∑–Ω–∞–π—Ç–∏ –Ω–∞ –º–∞–ø—ñ:",
        reply_markup=kb)

@dp.message(F.text == "üìû –ó–∞–º–æ–≤–∏—Ç–∏")
async def choose_order_point(message: types.Message, state: FSMContext):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üìç –í–æ–∫–∑–∞–ª—å–Ω–∞ 26–ë", callback_data="choose_branch_vokzalna")],
        [types.InlineKeyboardButton(text="üìç –ö–∏—ó–≤—Å—å–∫–∞ 102", callback_data="choose_branch_kyivska")],
        #[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    await message.answer("–û–±–µ—Ä—ñ—Ç—å Samurai, –≤ —è–∫–æ–º—É —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", reply_markup=kb)
    await state.set_state(Order.choosing_branch)

@dp.callback_query(F.data == "choose_branch_vokzalna")
async def show_vokzalna_numbers(callback: types.CallbackQuery, state: FSMContext):
    text = (
        "üìû <b>–ù–æ–º–µ—Ä–∏ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–í–æ–∫–∑–∞–ª—å–Ω–∞ 26–ë):</b>\n\n"
        "üì± +38 (068) 088 10 79\n"
        "üì± +38 (093) 730 20 24\n\n"
        "–°–∫–æ–ø—ñ—é–π—Ç–µ –Ω–æ–º–µ—Ä, —â–æ–± –≤–∏–∫–ª–∏–∫–∞—Ç–∏ üì≤"
    )
    await callback.message.answer(text, parse_mode=ParseMode.HTML)
    await state.clear()
    await callback.answer()

@dp.callback_query(F.data == "choose_branch_kyivska")
async def show_kyivska_numbers(callback: types.CallbackQuery, state: FSMContext):
    text = (
        "üìû <b>–ù–æ–º–µ—Ä –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–ö–∏—ó–≤—Å—å–∫–∞ 102):</b>\n"
        "üì± <a href='tel:+380939566263'>+38 (093) 956 62 63</a>\n\n"
        "–°–∫–æ–ø—ñ—é–π—Ç–µ –Ω–æ–º–µ—Ä, —â–æ–± –≤–∏–∫–ª–∏–∫–∞—Ç–∏ üì≤"
    )
    await callback.message.answer(text, parse_mode=ParseMode.HTML)
    await state.clear()
    await callback.answer()

@dp.callback_query(F.data == "back_to_order_points")
async def back_to_order_points(callback: types.CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìç –í–æ–∫–∑–∞–ª—å–Ω–∞ 26–ë", callback_data="choose_branch_vokzalna")],
        [InlineKeyboardButton(text="üìç –ö–∏—ó–≤—Å—å–∫–∞ 102", callback_data="choose_branch_kyivska")]
    ])
    await callback.message.edit_text("–û–±–µ—Ä—ñ—Ç—å —Ç–æ—á–∫—É, –∑ —è–∫–æ—ó —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", reply_markup=kb)
    await state.set_state(Order.choosing_branch)
    await callback.answer()

@dp.message(F.text == "üíå –í—ñ–¥–≥—É–∫ —ñ –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è")
async def feedback_handler(message: Message):
    user_feedback_waiting.add(message.from_user.id)
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –≤—ñ–¥–≥—É–∫ –∞–±–æ –ø–æ–¥—è–∫—É. –ú–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ —Ü–µ –≤—Ä–∞—Ö—É—î–º–æ!")

@dp.message()
async def catch_feedback(message: Message):
    if message.from_user.id in user_feedback_waiting:
        user_feedback_waiting.remove(message.from_user.id)

        user_data = registered_users.get(message.from_user.id)

        if not user_data:
            await message.answer("‚ùå –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.")
            return

        name = user_data.get("name", "‚Äî")
        phone = user_data.get("phone", "‚Äî")

        await bot.send_message(
            OWNER_ID,
            f"üì© <b>–ù–æ–≤–∏–π –≤—ñ–¥–≥—É–∫</b>\n"
            f"üë§ <b>–Ü–º‚Äô—è:</b> {name}\n"
            f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +{phone}\n"
            f"üí¨ @{message.from_user.username or '–±–µ–∑ username'}\n"
            f"üÜî <code>{message.from_user.id}</code>\n\n"
            f"<b>‚úâÔ∏è –í—ñ–¥–≥—É–∫:</b>\n{message.text}",
            parse_mode=ParseMode.HTML
        )
        await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à –≤—ñ–¥–≥—É–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó.")

#-----------------------------------------------------------

@dp.message(F.text == "üî¥ –°—Ö–æ–≤–∞—Ç–∏ –∞–∫—Ü—ñ—ó")
async def hide_aktsii(message: Message):
    global show_aktsii
    show_aktsii = False
    update_config_flag("show_aktsii", False)
    await message.answer("‚ùå –ö–Ω–æ–ø–∫–∞ '–ê–∫—Ü—ñ—ó' —Å—Ö–æ–≤–∞–Ω–∞", reply_markup=get_admin_keyboard())

@dp.message(F.text == "üü¢ –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –∞–∫—Ü—ñ—ó")
async def show_aktsii_on(message: Message):
    global show_aktsii
    show_aktsii = True
    update_config_flag("show_aktsii", True)
    await message.answer("‚úÖ –ö–Ω–æ–ø–∫–∞ '–ê–∫—Ü—ñ—ó' –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è", reply_markup=get_admin_keyboard())

@dp.message(F.text == "üî¥ –°—Ö–æ–≤–∞—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—ó")
async def hide_vacancies(message: Message):
    global show_vacancies
    show_vacancies = False
    update_config_flag("show_vacancies", False)
    await message.answer("‚ùå –ö–Ω–æ–ø–∫–∞ '–í–∞–∫–∞–Ω—Å—ñ—ó' —Å—Ö–æ–≤–∞–Ω–∞", reply_markup=get_admin_keyboard())

@dp.message(F.text == "üü¢ –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—ó")
async def show_vacancies_on(message: Message):
    global show_vacancies
    show_vacancies = True
    update_config_flag("show_vacancies", True)
    await message.answer("‚úÖ –ö–Ω–æ–ø–∫–∞ '–í–∞–∫–∞–Ω—Å—ñ—ó' –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è", reply_markup=get_admin_keyboard())

#-----------------------------------------------------------

@dp.message(Command(commands=["stop"]))
async def stop_handler(message: Message):
    await message.answer("üëã –î—è–∫—É—î–º–æ, —â–æ –∑–∞–≤—ñ—Ç–∞–ª–∏! –î–æ –Ω–æ–≤–∏—Ö –∑—É—Å—Ç—Ä—ñ—á–µ–π")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
